type AgentBy = variant { Id : nat; Name : text };
type AgentDetails = record {
  current_winner : opt principal;
  market_cap : nat64;
  ticker : nat32;
  current_prize_pool : record { nat64; nat };
  twitter : opt text;
  runeid : text;
  logo : opt text;
  txns : record { opt text; opt text };
  description : text;
  created_at : nat64;
  created_by : text;
  website : opt text;
  agent_name : text;
  discord : opt text;
  holders : nat32;
  total_supply : nat;
  openchat : opt text;
};
type BitcoinNetwork = variant { mainnet; regtest; testnet };
type BuyArgs = record {
  id : AgentBy;
  amount_out_min : nat;
  buy_exact_in : nat64;
};
type ChatArgs = record {
  agent : AgentBy;
  session_id : opt nat;
  message : text;
};
type CreateAgentArgs = record {
  ticker : opt nat32;
  twitter : opt text;
  logo : opt text;
  name : text;
  description : text;
  website : opt text;
  discord : opt text;
  openchat : opt text;
};
type HttpRequest = record {
  url : text;
  method : text;
  body : blob;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  streaming_strategy : opt StreamingStrategy;
  status_code : nat16;
};
type InitArgs = record {
  commission_receiver : opt principal;
  commission : nat16;
  creation_fee : nat64;
  bitcoin_network : BitcoinNetwork;
};
type LuckyDraw = record { id : AgentBy; message : text };
type SellArgs = record {
  id : AgentBy;
  token_amount : nat;
  amount_collateral_min : nat64;
};
type StreamingCallbackToken = record {
  chunk_index : nat32;
  asset_id : nat;
  content_encoding : text;
  chunk_size : nat32;
};
type StreamingStrategy = variant {
  Callback : record {
    token : StreamingCallbackToken;
    callback : func () -> () query;
  };
};
type WithdrawalType = variant {
  Rune : record { runeid : AgentBy; amount : nat };
  Bitcoin : record { amount : nat64 };
};
service : (InitArgs) -> {
  buy : (BuyArgs) -> (nat);
  chat : (ChatArgs) -> (text);
  create_agent : (CreateAgentArgs) -> (nat);
  get_agent_of : (AgentBy) -> (opt AgentDetails) query;
  get_agents : () -> (vec record { nat; AgentDetails }) query;
  get_balances : () -> (vec record { text; nat }) composite_query;
  get_deposit_address : () -> (text) query;
  http_request : (HttpRequest) -> (HttpResponse) query;
  lucky_draw : (LuckyDraw) -> (text);
  sell : (SellArgs) -> (nat);
  withdraw : (text, WithdrawalType) -> (nat);
}
